import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Output, NgModule } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResizedEvent {
    /**
     * @param {?} element
     * @param {?} newWidth
     * @param {?} newHeight
     * @param {?} oldWidth
     * @param {?} oldHeight
     */
    constructor(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResizedDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // tslint:disable-next-line:no-unused-expression
        new ResizeSensor(this.element.nativeElement, _ => this.onResized());
        this.onResized();
    }
    /**
     * @private
     * @return {?}
     */
    onResized() {
        /** @type {?} */
        const newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.emit(event);
    }
}
ResizedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resized]'
            },] }
];
/** @nocollapse */
ResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizedDirective.propDecorators = {
    resized: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularResizedEventModule {
}
AngularResizedEventModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ResizedDirective],
                imports: [CommonModule],
                exports: [ResizedDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularResizedEventModule, ResizedEvent, ResizedDirective };

//# sourceMappingURL=angular-resize-event.js.map